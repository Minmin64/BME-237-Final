import pandas as pd
import matplotlib.pyplot as plt
from math import log10

def adjust_label_positions(labels, threshold=0.02):
    adjusted_labels = [labels[0]]
    for i in range(1, len(labels)):
        if abs(labels[i] - labels[i - 1]) < threshold:
            adjusted_labels.append(labels[i - 1] + threshold)
        else:
            adjusted_labels.append(labels[i])
    return adjusted_labels

def volcano_plot(result, title, top_n=5):
    plt.figure(figsize=(10, 6))

    # Define colors based on conditions
    colors = ['red' if pval < 0.01 and logfc > 1.5 else 'blue' if pval < 0.01 and logfc < -1.5 else 'gray' for logfc, pval in zip(result['logFC'], result['PValue'])]

    # Scatter plot with smaller dots
    plt.scatter(result['logFC'], result['PValue'].apply(lambda x: -log10(x)), c=colors, s=2)  # Adjusted size here

    # Set plot labels and title
    plt.title(title)
    plt.xlabel('log2 Fold Change')
    plt.ylabel('-log10(PValue)')

    # Add reference lines
    plt.axhline(-log10(0.01), linestyle='dashed', color='red', label='PValue = 0.01')
    plt.axvline(-1.5, linestyle='dashed', color='red', label='logFC = -1.5')
    plt.axvline(1.5, linestyle='dashed', color='red', label='logFC = 1.5')

    # Label top genes (top 10 for each group based on highest absolute logFC values)
    top_genes_up = result[result['logFC'] > 1.5].nlargest(top_n, 'logFC')
    top_genes_down = result[result['logFC'] < -1.5].nsmallest(top_n, 'logFC')

    for i, row in top_genes_up.iterrows():
        plt.text(row['logFC'], -log10(row['PValue']) + 0.02, row['gene_id'], fontsize=8, ha='center', va='bottom', color='black')

    for i, row in top_genes_down.iterrows():
        plt.text(row['logFC'], -log10(row['PValue']) - 0.02, row['gene_id'], fontsize=8, ha='center', va='top', color='black')

    # Adjust label positions to avoid overlap
    plt.xticks(adjust_label_positions(plt.xticks()[0]))

    # Remove legend
    plt.legend().set_visible(False)

    plt.show()

# Load data from the Excel file
excel_file_path = "cleaned_STAR_result2.xlsx"  # Replace with your actual file name
data = pd.read_excel(excel_file_path)

# Example usage
volcano_plot(data[['logFC', 'PValue', 'gene_id']], "Differential Genes Expression of STAR: Lagging vs Control")
